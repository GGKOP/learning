// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module Blinky(	// src/main/scala/main.scala:5:7
  input  clock,	// <stdin>:10:11
         reset,	// <stdin>:11:11
  output io_led0	// src/main/scala/main.scala:6:14
);

  reg       led;	// src/main/scala/main.scala:10:20
  reg [5:0] counterWrap_c_value;	// src/main/scala/chisel3/util/Counter.scala:61:40
  always @(posedge clock) begin	// <stdin>:10:11
    if (reset) begin	// <stdin>:10:11
      led <= 1'h0;	// src/main/scala/main.scala:5:7, :10:20
      counterWrap_c_value <= 6'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
    end
    else begin	// <stdin>:10:11
      automatic logic counterWrap;	// src/main/scala/chisel3/util/Counter.scala:73:24
      counterWrap = counterWrap_c_value == 6'h31;	// src/main/scala/chisel3/util/Counter.scala:61:40, :73:24
      led <= counterWrap ^ led;	// src/main/scala/chisel3/util/Counter.scala:73:24, src/main/scala/main.scala:10:20, :12:21, :13:9
      if (counterWrap)	// src/main/scala/chisel3/util/Counter.scala:73:24
        counterWrap_c_value <= 6'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
      else	// src/main/scala/chisel3/util/Counter.scala:73:24
        counterWrap_c_value <= counterWrap_c_value + 6'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/main.scala:5:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/main.scala:5:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/main.scala:5:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/main/scala/main.scala:5:7
      automatic logic [31:0] _RANDOM[0:0];	// src/main/scala/main.scala:5:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/main.scala:5:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/main.scala:5:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/main.scala:5:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// src/main/scala/main.scala:5:7
        led = _RANDOM[/*Zero width*/ 1'b0][0];	// src/main/scala/main.scala:5:7, :10:20
        counterWrap_c_value = _RANDOM[/*Zero width*/ 1'b0][6:1];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/main.scala:5:7, :10:20
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/main.scala:5:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/main.scala:5:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_led0 = led;	// src/main/scala/main.scala:5:7, :10:20
endmodule

